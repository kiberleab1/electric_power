{"ast":null,"code":"/**\r\n * Module dependencies.\r\n */\nvar Emitter = require('emitter');\n\nvar clone = require('clone');\n\nvar type = require('type');\n\nvar ease = require('ease');\n/**\r\n * Expose `Tween`.\r\n */\n\n\nmodule.exports = Tween;\n/**\r\n * Initialize a new `Tween` with `obj`.\r\n *\r\n * @param {Object|Array} obj\r\n * @api public\r\n */\n\nfunction Tween(obj) {\n  if (!(this instanceof Tween)) return new Tween(obj);\n  this._from = obj;\n  this.ease('linear');\n  this.duration(500);\n}\n/**\r\n * Mixin emitter.\r\n */\n\n\nEmitter(Tween.prototype);\n/**\r\n * Reset the tween.\r\n *\r\n * @api public\r\n */\n\nTween.prototype.reset = function () {\n  this.isArray = 'array' === type(this._from);\n  this._curr = clone(this._from);\n  this._done = false;\n  this._start = Date.now();\n  return this;\n};\n/**\r\n * Tween to `obj` and reset internal state.\r\n *\r\n *    tween.to({ x: 50, y: 100 })\r\n *\r\n * @param {Object|Array} obj\r\n * @return {Tween} self\r\n * @api public\r\n */\n\n\nTween.prototype.to = function (obj) {\n  this.reset();\n  this._to = obj;\n  return this;\n};\n/**\r\n * Set duration to `ms` [500].\r\n *\r\n * @param {Number} ms\r\n * @return {Tween} self\r\n * @api public\r\n */\n\n\nTween.prototype.duration = function (ms) {\n  this._duration = ms;\n  return this;\n};\n/**\r\n * Set easing function to `fn`.\r\n *\r\n *    tween.ease('in-out-sine')\r\n *\r\n * @param {String|Function} fn\r\n * @return {Tween}\r\n * @api public\r\n */\n\n\nTween.prototype.ease = function (fn) {\n  fn = 'function' == typeof fn ? fn : ease[fn];\n  if (!fn) throw new TypeError('invalid easing function');\n  this._ease = fn;\n  return this;\n};\n/**\r\n * Stop the tween and immediately emit \"stop\" and \"end\".\r\n *\r\n * @return {Tween}\r\n * @api public\r\n */\n\n\nTween.prototype.stop = function () {\n  this.stopped = true;\n  this._done = true;\n  this.emit('stop');\n  this.emit('end');\n  return this;\n};\n/**\r\n * Perform a step.\r\n *\r\n * @return {Tween} self\r\n * @api private\r\n */\n\n\nTween.prototype.step = function () {\n  if (this._done) return; // duration\n\n  var duration = this._duration;\n  var now = Date.now();\n  var delta = now - this._start;\n  var done = delta >= duration; // complete\n\n  if (done) {\n    this._from = this._to;\n\n    this._update(this._to);\n\n    this._done = true;\n    this.emit('end');\n    return this;\n  } // tween\n\n\n  var from = this._from;\n  var to = this._to;\n  var curr = this._curr;\n  var fn = this._ease;\n  var p = (now - this._start) / duration;\n  var n = fn(p); // array\n\n  if (this.isArray) {\n    for (var i = 0; i < from.length; ++i) {\n      curr[i] = from[i] + (to[i] - from[i]) * n;\n    }\n\n    this._update(curr);\n\n    return this;\n  } // objech\n\n\n  for (var k in from) {\n    curr[k] = from[k] + (to[k] - from[k]) * n;\n  }\n\n  this._update(curr);\n\n  return this;\n};\n/**\r\n * Set update function to `fn` or\r\n * when no argument is given this performs\r\n * a \"step\".\r\n *\r\n * @param {Function} fn\r\n * @return {Tween} self\r\n * @api public\r\n */\n\n\nTween.prototype.update = function (fn) {\n  if (0 == arguments.length) return this.step();\n  this._update = fn;\n  return this;\n};","map":null,"metadata":{},"sourceType":"script"}
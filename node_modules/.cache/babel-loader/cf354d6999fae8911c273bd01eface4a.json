{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n * @emails oncall+draft_js\r\n */\n'use strict';\n\nvar DOMObserver = require(\"./DOMObserver\");\n\nvar DraftModifier = require(\"./DraftModifier\");\n\nvar DraftOffsetKey = require(\"./DraftOffsetKey\");\n\nvar EditorState = require(\"./EditorState\");\n\nvar Keys = require(\"fbjs/lib/Keys\");\n\nvar UserAgent = require(\"fbjs/lib/UserAgent\");\n\nvar editOnSelect = require(\"./editOnSelect\");\n\nvar getContentEditableContainer = require(\"./getContentEditableContainer\");\n\nvar getDraftEditorSelection = require(\"./getDraftEditorSelection\");\n\nvar getEntityKeyForSelection = require(\"./getEntityKeyForSelection\");\n\nvar nullthrows = require(\"fbjs/lib/nullthrows\");\n\nvar isIE = UserAgent.isBrowser('IE');\n/**\r\n * Millisecond delay to allow `compositionstart` to fire again upon\r\n * `compositionend`.\r\n *\r\n * This is used for Korean input to ensure that typing can continue without\r\n * the editor trying to render too quickly. More specifically, Safari 7.1+\r\n * triggers `compositionstart` a little slower than Chrome/FF, which\r\n * leads to composed characters being resolved and re-render occurring\r\n * sooner than we want.\r\n */\n\nvar RESOLVE_DELAY = 20;\n/**\r\n * A handful of variables used to track the current composition and its\r\n * resolution status. These exist at the module level because it is not\r\n * possible to have compositions occurring in multiple editors simultaneously,\r\n * and it simplifies state management with respect to the DraftEditor component.\r\n */\n\nvar resolved = false;\nvar stillComposing = false;\nvar domObserver = null;\n\nfunction startDOMObserver(editor) {\n  if (!domObserver) {\n    domObserver = new DOMObserver(getContentEditableContainer(editor));\n    domObserver.start();\n  }\n}\n\nvar DraftEditorCompositionHandler = {\n  /**\r\n   * A `compositionstart` event has fired while we're still in composition\r\n   * mode. Continue the current composition session to prevent a re-render.\r\n   */\n  onCompositionStart: function onCompositionStart(editor) {\n    stillComposing = true;\n    startDOMObserver(editor);\n  },\n\n  /**\r\n   * Attempt to end the current composition session.\r\n   *\r\n   * Defer handling because browser will still insert the chars into active\r\n   * element after `compositionend`. If a `compositionstart` event fires\r\n   * before `resolveComposition` executes, our composition session will\r\n   * continue.\r\n   *\r\n   * The `resolved` flag is useful because certain IME interfaces fire the\r\n   * `compositionend` event multiple times, thus queueing up multiple attempts\r\n   * at handling the composition. Since handling the same composition event\r\n   * twice could break the DOM, we only use the first event. Example: Arabic\r\n   * Google Input Tools on Windows 8.1 fires `compositionend` three times.\r\n   */\n  onCompositionEnd: function onCompositionEnd(editor) {\n    resolved = false;\n    stillComposing = false;\n    setTimeout(function () {\n      if (!resolved) {\n        DraftEditorCompositionHandler.resolveComposition(editor);\n      }\n    }, RESOLVE_DELAY);\n  },\n  onSelect: editOnSelect,\n\n  /**\r\n   * In Safari, keydown events may fire when committing compositions. If\r\n   * the arrow keys are used to commit, prevent default so that the cursor\r\n   * doesn't move, otherwise it will jump back noticeably on re-render.\r\n   */\n  onKeyDown: function onKeyDown(editor, e) {\n    if (!stillComposing) {\n      // If a keydown event is received after compositionend but before the\n      // 20ms timer expires (ex: type option-E then backspace, or type A then\n      // backspace in 2-Set Korean), we should immediately resolve the\n      // composition and reinterpret the key press in edit mode.\n      DraftEditorCompositionHandler.resolveComposition(editor);\n\n      editor._onKeyDown(e);\n\n      return;\n    }\n\n    if (e.which === Keys.RIGHT || e.which === Keys.LEFT) {\n      e.preventDefault();\n    }\n  },\n\n  /**\r\n   * Keypress events may fire when committing compositions. In Firefox,\r\n   * pressing RETURN commits the composition and inserts extra newline\r\n   * characters that we do not want. `preventDefault` allows the composition\r\n   * to be committed while preventing the extra characters.\r\n   */\n  onKeyPress: function onKeyPress(_editor, e) {\n    if (e.which === Keys.RETURN) {\n      e.preventDefault();\n    }\n  },\n\n  /**\r\n   * Attempt to insert composed characters into the document.\r\n   *\r\n   * If we are still in a composition session, do nothing. Otherwise, insert\r\n   * the characters into the document and terminate the composition session.\r\n   *\r\n   * If no characters were composed -- for instance, the user\r\n   * deleted all composed characters and committed nothing new --\r\n   * force a re-render. We also re-render when the composition occurs\r\n   * at the beginning of a leaf, to ensure that if the browser has\r\n   * created a new text node for the composition, we will discard it.\r\n   *\r\n   * Resetting innerHTML will move focus to the beginning of the editor,\r\n   * so we update to force it back to the correct place.\r\n   */\n  resolveComposition: function resolveComposition(editor) {\n    if (stillComposing) {\n      return;\n    }\n\n    var mutations = nullthrows(domObserver).stopAndFlushMutations();\n    domObserver = null;\n    resolved = true;\n    var editorState = EditorState.set(editor._latestEditorState, {\n      inCompositionMode: false\n    });\n    editor.exitCurrentMode();\n\n    if (!mutations.size) {\n      editor.update(editorState);\n      return;\n    } // TODO, check if Facebook still needs this flag or if it could be removed.\n    // Since there can be multiple mutations providing a `composedChars` doesn't\n    // apply well on this new model.\n    // if (\n    //   gkx('draft_handlebeforeinput_composed_text') &&\n    //   editor.props.handleBeforeInput &&\n    //   isEventHandled(\n    //     editor.props.handleBeforeInput(\n    //       composedChars,\n    //       editorState,\n    //       event.timeStamp,\n    //     ),\n    //   )\n    // ) {\n    //   return;\n    // }\n\n\n    var contentState = editorState.getCurrentContent();\n    mutations.forEach(function (composedChars, offsetKey) {\n      var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey),\n          blockKey = _DraftOffsetKey$decod.blockKey,\n          decoratorKey = _DraftOffsetKey$decod.decoratorKey,\n          leafKey = _DraftOffsetKey$decod.leafKey;\n\n      var _editorState$getBlock = editorState.getBlockTree(blockKey).getIn([decoratorKey, 'leaves', leafKey]),\n          start = _editorState$getBlock.start,\n          end = _editorState$getBlock.end;\n\n      var replacementRange = editorState.getSelection().merge({\n        anchorKey: blockKey,\n        focusKey: blockKey,\n        anchorOffset: start,\n        focusOffset: end,\n        isBackward: false\n      });\n      var entityKey = getEntityKeyForSelection(contentState, replacementRange);\n      var currentStyle = contentState.getBlockForKey(blockKey).getInlineStyleAt(start);\n      contentState = DraftModifier.replaceText(contentState, replacementRange, composedChars, currentStyle, entityKey); // We need to update the editorState so the leaf node ranges are properly\n      // updated and multiple mutations are correctly applied.\n\n      editorState = EditorState.set(editorState, {\n        currentContent: contentState\n      });\n    }); // When we apply the text changes to the ContentState, the selection always\n    // goes to the end of the field, but it should just stay where it is\n    // after compositionEnd.\n\n    var documentSelection = getDraftEditorSelection(editorState, getContentEditableContainer(editor));\n    var compositionEndSelectionState = documentSelection.selectionState;\n    editor.restoreEditorDOM(); // See:\n    // - https://github.com/facebook/draft-js/issues/2093\n    // - https://github.com/facebook/draft-js/pull/2094\n    // Apply this fix only in IE for now. We can test it in\n    // other browsers in the future to ensure no regressions\n\n    var editorStateWithUpdatedSelection = isIE ? EditorState.forceSelection(editorState, compositionEndSelectionState) : EditorState.acceptSelection(editorState, compositionEndSelectionState);\n    editor.update(EditorState.push(editorStateWithUpdatedSelection, contentState, 'insert-characters'));\n  }\n};\nmodule.exports = DraftEditorCompositionHandler;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { range, boolean } from './decorators/';\n\nvar Options =\n/** @class */\nfunction () {\n  function Options(config) {\n    var _this = this;\n\n    if (config === void 0) {\n      config = {};\n    }\n    /**\r\n     * Momentum reduction damping factor, a float value between `(0, 1)`.\r\n     * The lower the value is, the more smooth the scrolling will be\r\n     * (also the more paint frames).\r\n     */\n\n\n    this.damping = 0.1;\n    /**\r\n     * Minimal size for scrollbar thumbs.\r\n     */\n\n    this.thumbMinSize = 20;\n    /**\r\n     * Render every frame in integer pixel values\r\n     * set to `true` to improve scrolling performance.\r\n     */\n\n    this.renderByPixels = true;\n    /**\r\n     * Keep scrollbar tracks visible\r\n     */\n\n    this.alwaysShowTracks = false;\n    /**\r\n     * Set to `true` to allow outer scrollbars continue scrolling\r\n     * when current scrollbar reaches edge.\r\n     */\n\n    this.continuousScrolling = true;\n    /**\r\n     * Delegate wheel events and touch events to the given element.\r\n     * By default, the container element is used.\r\n     * This option will be useful for dealing with fixed elements.\r\n     */\n\n    this.delegateTo = null;\n    /**\r\n     * Options for plugins. Syntax:\r\n     *   plugins[pluginName] = pluginOptions: any\r\n     */\n\n    this.plugins = {};\n    Object.keys(config).forEach(function (prop) {\n      _this[prop] = config[prop];\n    });\n  }\n\n  Object.defineProperty(Options.prototype, \"wheelEventTarget\", {\n    get: function get() {\n      return this.delegateTo;\n    },\n    set: function set(el) {\n      console.warn('[smooth-scrollbar]: `options.wheelEventTarget` is deprecated and will be removed in the future, use `options.delegateTo` instead.');\n      this.delegateTo = el;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  __decorate([range(0, 1)], Options.prototype, \"damping\", void 0);\n\n  __decorate([range(0, Infinity)], Options.prototype, \"thumbMinSize\", void 0);\n\n  __decorate([boolean], Options.prototype, \"renderByPixels\", void 0);\n\n  __decorate([boolean], Options.prototype, \"alwaysShowTracks\", void 0);\n\n  __decorate([boolean], Options.prototype, \"continuousScrolling\", void 0);\n\n  return Options;\n}();\n\nexport { Options };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"C:\\\\projects\\\\react\\\\sample_project_stock\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\projects\\\\react\\\\sample_project_stock\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\projects\\\\react\\\\sample_project_stock\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\projects\\\\react\\\\sample_project_stock\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\projects\\\\react\\\\sample_project_stock\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\projects\\\\react\\\\sample_project_stock\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\projects\\\\react\\\\sample_project_stock\\\\src\\\\containers\\\\Charts\\\\ChartJs\\\\components\\\\RandomAnimatedLine.jsx\";\n\n/* eslint-disable no-underscore-dangle,react/no-did-mount-set-state */\nimport React, { PureComponent } from 'react';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { Line } from 'react-chartjs-2';\nimport { withTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\nvar initialState = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [{\n    label: 'My First Dataset',\n    fill: false,\n    lineTension: 0.3,\n    backgroundColor: '#36A2EB',\n    borderColor: '#36A2EB',\n    borderWidth: 2,\n    pointBackgroundColor: '#36A2EB',\n    pointHoverRadius: 3,\n    pointHoverBorderWidth: 1,\n    pointRadius: 1,\n    pointHitRadius: 10,\n    data: [65, 59, 80, 81, 56, 55, 40]\n  }, {\n    label: 'My Second Dataset',\n    fill: false,\n    lineTension: 0.3,\n    backgroundColor: '#FF6384',\n    borderColor: '#FF6384',\n    borderWidth: 2,\n    pointBackgroundColor: '#FF6384',\n    pointHoverRadius: 3,\n    pointHoverBorderWidth: 1,\n    pointRadius: 1,\n    pointHitRadius: 10,\n    data: [5, 7, 54, 32, 87, 45, 25]\n  }]\n};\nvar options = {\n  scales: {\n    xAxes: [{\n      gridLines: {\n        color: 'rgb(204, 204, 204)',\n        borderDash: [3, 3]\n      },\n      ticks: {\n        fontColor: 'rgb(204, 204, 204)'\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        color: 'rgb(204, 204, 204)',\n        borderDash: [3, 3]\n      },\n      ticks: {\n        fontColor: 'rgb(204, 204, 204)'\n      }\n    }]\n  }\n};\n\nvar RandomAnimatedLine = /*#__PURE__*/function (_PureComponent) {\n  _inherits(RandomAnimatedLine, _PureComponent);\n\n  function RandomAnimatedLine() {\n    var _this2;\n\n    _classCallCheck(this, RandomAnimatedLine);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(RandomAnimatedLine).call(this));\n    _this2.state = {\n      data: initialState,\n      intervalId: null\n    };\n    return _this2;\n  }\n\n  _createClass(RandomAnimatedLine, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      var intervalId = setInterval(function () {\n        var oldDataSet = _this.state.data.datasets[0];\n        var newData = [];\n\n        for (var x = 0; x < _this.state.data.labels.length; x += 1) {\n          newData.push(Math.floor(Math.random() * 100));\n        }\n\n        var newDataSet = _objectSpread({}, oldDataSet);\n\n        newDataSet.data = newData;\n        var oldDataSet2 = _this.state.data.datasets[1];\n        var newData2 = [];\n\n        for (var _x = 0; _x < _this.state.data.labels.length; _x += 1) {\n          newData2.push(Math.floor(Math.random() * 100));\n        }\n\n        var newDataSet2 = _objectSpread({}, oldDataSet2);\n\n        newDataSet2.data = newData2;\n\n        var newState = _objectSpread({}, initialState, {\n          data: {\n            datasets: [newDataSet, newDataSet2],\n            labels: _this.state.data.labels\n          }\n        });\n\n        _this.setState(newState);\n      }, 4000);\n      this.setState({\n        intervalId: intervalId\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var intervalId = this.state.intervalId;\n      clearInterval(intervalId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var t = this.props.t;\n      var data = this.state.data;\n      return React.createElement(Col, {\n        md: 12,\n        lg: 12,\n        xl: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card__title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"bold-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, t('charts.react_chartjs.random_animated_line'))), React.createElement(Line, {\n        data: data,\n        options: options,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return RandomAnimatedLine;\n}(PureComponent);\n\nRandomAnimatedLine.propTypes = {\n  t: PropTypes.func.isRequired\n};\nexport default withTranslation('common')(RandomAnimatedLine);","map":{"version":3,"sources":["C:/projects/react/sample_project_stock/src/containers/Charts/ChartJs/components/RandomAnimatedLine.jsx"],"names":["React","PureComponent","Card","CardBody","Col","Line","withTranslation","PropTypes","initialState","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","pointBackgroundColor","pointHoverRadius","pointHoverBorderWidth","pointRadius","pointHitRadius","data","options","scales","xAxes","gridLines","color","borderDash","ticks","fontColor","yAxes","RandomAnimatedLine","state","intervalId","_this","setInterval","oldDataSet","newData","x","length","push","Math","floor","random","newDataSet","oldDataSet2","newData2","newDataSet2","newState","setState","clearInterval","t","props","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle,react/no-did-mount-set-state */\r\nimport React, { PureComponent } from 'react';\r\nimport { Card, CardBody, Col } from 'reactstrap';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { withTranslation } from 'react-i18next';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst initialState = {\r\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n  datasets: [\r\n    {\r\n      label: 'My First Dataset',\r\n      fill: false,\r\n      lineTension: 0.3,\r\n      backgroundColor: '#36A2EB',\r\n      borderColor: '#36A2EB',\r\n      borderWidth: 2,\r\n      pointBackgroundColor: '#36A2EB',\r\n      pointHoverRadius: 3,\r\n      pointHoverBorderWidth: 1,\r\n      pointRadius: 1,\r\n      pointHitRadius: 10,\r\n      data: [65, 59, 80, 81, 56, 55, 40],\r\n    },\r\n    {\r\n      label: 'My Second Dataset',\r\n      fill: false,\r\n      lineTension: 0.3,\r\n      backgroundColor: '#FF6384',\r\n      borderColor: '#FF6384',\r\n      borderWidth: 2,\r\n      pointBackgroundColor: '#FF6384',\r\n      pointHoverRadius: 3,\r\n      pointHoverBorderWidth: 1,\r\n      pointRadius: 1,\r\n      pointHitRadius: 10,\r\n      data: [5, 7, 54, 32, 87, 45, 25],\r\n    },\r\n  ],\r\n};\r\n\r\nconst options = {\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        gridLines: {\r\n          color: 'rgb(204, 204, 204)',\r\n          borderDash: [3, 3],\r\n        },\r\n        ticks: {\r\n          fontColor: 'rgb(204, 204, 204)',\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          color: 'rgb(204, 204, 204)',\r\n          borderDash: [3, 3],\r\n        },\r\n        ticks: {\r\n          fontColor: 'rgb(204, 204, 204)',\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nclass RandomAnimatedLine extends PureComponent {\r\n  static propTypes = {\r\n    t: PropTypes.func.isRequired,\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      data: initialState,\r\n      intervalId: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const _this = this;\r\n\r\n    const intervalId = setInterval(() => {\r\n      const oldDataSet = _this.state.data.datasets[0];\r\n      const newData = [];\r\n\r\n      for (let x = 0; x < _this.state.data.labels.length; x += 1) {\r\n        newData.push(Math.floor(Math.random() * 100));\r\n      }\r\n\r\n      const newDataSet = {\r\n        ...oldDataSet,\r\n      };\r\n\r\n      newDataSet.data = newData;\r\n\r\n      const oldDataSet2 = _this.state.data.datasets[1];\r\n      const newData2 = [];\r\n\r\n      for (let x = 0; x < _this.state.data.labels.length; x += 1) {\r\n        newData2.push(Math.floor(Math.random() * 100));\r\n      }\r\n\r\n      const newDataSet2 = {\r\n        ...oldDataSet2,\r\n      };\r\n\r\n      newDataSet2.data = newData2;\r\n\r\n      const newState = {\r\n        ...initialState,\r\n        data: {\r\n          datasets: [newDataSet, newDataSet2],\r\n          labels: _this.state.data.labels,\r\n        },\r\n      };\r\n\r\n      _this.setState(newState);\r\n    }, 4000);\r\n\r\n    this.setState({ intervalId });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { intervalId } = this.state;\r\n    clearInterval(intervalId);\r\n  }\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    const { data } = this.state;\r\n\r\n    return (\r\n      <Col md={12} lg={12} xl={6}>\r\n        <Card>\r\n          <CardBody>\r\n            <div className=\"card__title\">\r\n              <h5 className=\"bold-text\">{t('charts.react_chartjs.random_animated_line')}</h5>\r\n            </div>\r\n            <Line data={data} options={options} />\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation('common')(RandomAnimatedLine);\r\n"]},"metadata":{},"sourceType":"module"}